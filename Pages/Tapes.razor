@page "/tapes"
@inject HttpClient _client


<h3>Tapes</h3>
@if (Globals.VideoAccess)
{

    <QuickGrid Items="@tapesQ" Theme="corporate">

        <TemplateColumn Title="Title" SortBy="@sortByTitle" IsDefaultSortColumn="true">
            <a href="@context.URLofVideo" target="_blank"> @context.Title</a>

        </TemplateColumn>
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Author)" Sortable="true" />
    </QuickGrid>
}
else
{
    <h4>You need to sign in before you can see the tapes.</h4>
}


@code {

    public string message = "";
    public string errorMessage = "";
    public IQueryable<Tape>? tapesQ;

    GridSort<Tape> sortByTitle = GridSort<Tape>
    .ByAscending(p => p.Title);

    protected override async Task OnInitializedAsync()
    {
        if (Globals.VideoAccess)
        {
            try
            {
                await ReadTapesCSV();
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message.ToString();
            }
        }
        this.StateHasChanged();
    }

    protected async Task ReadTapesCSV()
    {
        List<string> _tape_lines = new List<string>();
        List<Tape> _tapes = new List<Tape>();
        // CW Webmaster / My Drive / WebSiteAttachments / Memberslists / Tapes List
        // https://drive.google.com/drive/folders/15OGqNYdpWHk8sGsuMhy7t-8aDXh9Gy-T
        string _urlToTapesCSV = "https://docs.google.com/spreadsheets/d/1StV1vVbnV56Nd56Pdx-RGAB-HoWzo69PIOLsZOGHG5A/export?format=csv";

        HttpResponseMessage response = await _client.GetAsync(_urlToTapesCSV);

        string stringOfMembers = await response.Content.ReadAsStringAsync();

        _tape_lines = stringOfMembers.Split("\n").ToList();

        foreach (var item in _tape_lines)
        {
            List<string> _fields = item.Split(",").ToList();
            Tape _tape = new Tape();
            _tape.Title = _fields[0];
            _tape.Description = _fields[1];
            _tape.Author = _fields[2];
            _tape.URLofVideo = _fields[3];

            _tapes.Add(_tape);
        }
        tapesQ = _tapes.AsQueryable<Tape>();
        this.StateHasChanged();
    }



}
